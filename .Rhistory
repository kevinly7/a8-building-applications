api_key <- '5b61507b1d8329026771e590ba8da759a7671363'
user_url <- paste0(github_base, user, '?access_token=', api_key)
user_github_data <- fromJSON(user_url)
user_repos_url <- user_github_data$repos_url
repo_data_url <- paste0(user_repos_url, '?access_token=', api_key, '&per_page=100&sort=created&order=desc')
repo_data <- fromJSON(repo_data_url)
repo_data <- flatten(repo_data)
num_repos <- nrow(repo_data)
most_popular <- select(filter(repo_data, forks_count == max(forks_count)), name)
image_url <- user_github_data$avatar_url
repo_data <- mutate(repo_data, formattedCreateDate = format(as.Date(repo_data$created_at), format="%B %d %Y"))
simplified_data_frame <- select(repo_data, name, html_url, description, size, language, forks_count, formattedCreateDate)
names(simplified_data_frame) <- c('Repoistory Name', 'URL Address', 'Description', 'Size', 'Language', 'Number of Forks', 'Date Created')
kable(simplified_data_frame, format = 'markdown')
summary_table <- count(simplified_data_frame, Language)
summary_table <- mean(simplified_data_frame, Number of Forks)
summary_table <- mean(simplified_data_frame, 'Number of Forks')
names(simplified_data_frame) <- c('Repoistory_Name', 'URL_Address', 'Description', 'Size', 'Language', 'Number_of_Forks', 'Date_Created')
summary_table <- mean(simplified_data_frame, Number_of_Forks)
summary_table <- sumarise(simplified_data_frame, mean(Number_of_Forks))
summary_table <- summarise(simplified_data_frame, mean(Number_of_Forks))
summary_table <- count(simplified_data_frame, Language)
summary_table <- count(simplified_data_frame, Number_of_Forks)
summary_table <- count(simplified_data_frame, Language)
summary_table <- mutate(summary_table, Fork_Count = count(simplified_data_frame, Number_of_Forks))
test <- count(simplified_data_frame, Number_of_Forks)
View(test)
names(summary_table) <- c('Language', 'Number_or_Repos')
summary_table <- mutate(summary_table, Average_Fork_Count = summarise(simplified_data_frame, mean(Number_of_Forks))
)
summary_table <- mutate(summary_table, Average_Fork_Count = summarise(simplified_data_frame, mean(Number_of_Forks)))
summary_table <- group_by(simplified_data_frame, mean(forks))
summary_table <- group_by(simplified_data_frame, mean(Number_of_Forks))
summary_table <- count(simplified_data_frame, Language)
names(summary_table) <- c('Language', 'Number_or_Repos')
summary_table <- groupBy(simplified_data_frame, Language)
summary_table <- group_by(simplified_data_frame, Language)
summary_table <- simplified_data_frame %>%
group_by(language) %>%
summarise(
'Number_of_Repos' = n(),
'Average_Forks' = mean(Number_of_Forks, na.rm = TRUE)
)
summary_table <- simplified_data_frame %>%
group_by(Language) %>%
summarise(
'Number_of_Repos' = n(),
'Average_Forks' = mean(Number_of_Forks, na.rm = TRUE)
)
require(dplyr)
require('plotly')
library('plotly')
install.packages("plotly")
require(plotly)
gdp <- rename(gdp, value = Gross_GDP)
gdp <- rename(gdp, value = 'Gross_GDP')
gdp <- read.csv('http://data.okfn.org/data/core/gdp/r/gdp.csv')
gdp <- rename(gdp, value = 'Gross_GDP')
gdp <- rename(gdp, value = Gross_GDP)
View(gdp)
gdp <- rename(gdp, Value = 'Gross_GDP')
gdp <- rename(gdp, Value = Gross_GDP)
gdp <- rename(gdp, Value = 'Gross_GDP')
gdp <- rename(gdp, Value = Gross_GDP)
rename(gdp, Value = Gross_GDP)
rename(gdp, Value = 'Gross_GDP')
rename(gdp, Gross_GDP = Value)
View(gdp)
gdp <- read.csv('http://data.okfn.org/data/core/gdp/r/gdp.csv')
gdp <- rename(gdp, Gross_GDP = Value)
pop <- read.csv('http://data.okfn.org/data/core/population/r/population.csv')
View(pop)
pop <- rename(pop, Population = Value)
new <- left_join(gdp, pop, by=c("Country.Code", "Year", "Country.Name"), copy=FALSE)
new <- filter(new, Year = 2014)
new <- filter(new, Year == 2014)
View(new)
new <- mutate(new, GDP_Per_Capita = Gross_GDP / Population)
plot_ly(new, z = GDP_Per_Capita, text = Country.Name, locations = Country.Code, type = 'choropleth')
library(plotly)
library(dplyr)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
View(d)
plot_ly(d, x=depth, y=table, mode="markers")
plot_ly(d, x=depth, y=table, mode="markers", color=depth)
plot_ly(d, x=table, y=depth, mode="markers", color=depth)
plot_ly(d, x=table, y=depth, size = price, mode="markers")
layout(title="Diamond Table V. Depth")
plot_ly(d, x = carat, y = price, mode = "markers", color = cut, size = carat)
plot_ly(d, x = carat, y = price, color = cut, size = carat)
, mode = "markers"
plot_ly(d, x = carat, y = price, mode = "markers", color = cut, size = carat)
plot_ly(d, x = carat, y = price, mode = "markers", color = size, size = carat)
plot_ly(d, x = carat, y = price, mode = "markers", color = size, size = carat)
plot_ly(d, x = carat, y = price, mode = "markers", color = carat, size = carat)
plot_ly(d, x = carat, y = price, mode = "markers", color = price, size = carat)
plot_ly(d, x = carat, y = price, mode = "markers", color = cut, size = carat)
plot_ly(d, x = carat, y = price, mode = "markers", color = cut, size = carat)  %>%
layout(title="Diamond Carat V. Price" )
layout(title="Diamond Table V. Depth")
plot_ly(d, x=table, y=depth, size = price, mode="markers")  %>%
layout(title="Diamond Table V. Depth")
plot_ly(d, x=depth, y=price, size = price, mode="markers")  %>%
layout(title="Diamond Table V. Depth")
table
layout(title="Diamond Table V. Depth")
plot_ly(d, x=table, y=depth, size = price, mode="markers")  %>%
layout(title="Diamond Table V. Depth")
require('dplyr')
a <- list()
a <- list()
b <- 2
a <- b
a$b
a <- c(b, c)
a$b
a$c
number of students <- 2
mac_user <- 4
number_of_students <- 2
mac_user <- 4
a <- c(number_of_students, mac_user)
a$number_of_students
a[number_of_students]
a
a$number_of_students <- 2
a <- list()
number_of_students <- 2
mac_user <- 4
a$number_of_students <- 2
a$number_of_students
shiny::runApp('Desktop/info498f/homework/info498-final-project')
data.is.dataframe
as.data.frame(data)
is.data.frame(data)
data <- as.data.frame(data)
library(jsonlite)
source('scripts/getLatLng.R')
get_data <- function(user_city, user_state) {
base_url <- "https://zilyo.p.mashape.com/search?"
key_parameter <- "mashape-key="
key <- "nowlV7qpGSmshTJ2jv6AeLUAGUrjp1632Pzjsn40XflJySxVK5"
latlng <- getLatLng(user_city, user_state)
lat <- latlng$lat
lng <- latlng$lon
required_parameters <- paste0("&latitude=", lat, "&longitude=", lng)
query <- paste0(base_url, key_parameter, key, required_parameters)
data <- fromJSON(query)
data <- as.data.frame(data)
return(data)
}
get_data(seattle, wa)
library(localgeo)
# Gets the lat/ln of a specified city + state
getLatLng <- function(city_search, state_search) {
p <- geocode(city_search, state_search)
return(p)
}
get_data <- function(user_city, user_state) {
base_url <- "https://zilyo.p.mashape.com/search?"
key_parameter <- "mashape-key="
key <- "nowlV7qpGSmshTJ2jv6AeLUAGUrjp1632Pzjsn40XflJySxVK5"
latlng <- getLatLng(user_city, user_state)
lat <- latlng$lat
lng <- latlng$lon
required_parameters <- paste0("&latitude=", lat, "&longitude=", lng)
query <- paste0(base_url, key_parameter, key, required_parameters)
data <- fromJSON(query)
data <- as.data.frame(data)
return(data)
}
library(jsonlite)
source('scripts/getLatLng.R')
get_data <- function(user_city, user_state) {
base_url <- "https://zilyo.p.mashape.com/search?"
key_parameter <- "mashape-key="
key <- "nowlV7qpGSmshTJ2jv6AeLUAGUrjp1632Pzjsn40XflJySxVK5"
latlng <- getLatLng(user_city, user_state)
lat <- latlng$lat
lng <- latlng$lon
required_parameters <- paste0("&latitude=", lat, "&longitude=", lng)
query <- paste0(base_url, key_parameter, key, required_parameters)
data <- fromJSON(query)
data <- as.data.frame(data)
return(data)
}
get_data(seattle, wa)
library(localgeo)
install.packages(localgeo)
library(localgeo)
# Gets the lat/ln of a specified city + state
getLatLng <- function(city_search, state_search) {
p <- geocode(city_search, state_search)
return(p)
}
library(jsonlite)
source('scripts/getLatLng.R')
get_data <- function(user_city, user_state) {
base_url <- "https://zilyo.p.mashape.com/search?"
key_parameter <- "mashape-key="
key <- "nowlV7qpGSmshTJ2jv6AeLUAGUrjp1632Pzjsn40XflJySxVK5"
latlng <- getLatLng(user_city, user_state)
lat <- latlng$lat
lng <- latlng$lon
required_parameters <- paste0("&latitude=", lat, "&longitude=", lng)
query <- paste0(base_url, key_parameter, key, required_parameters)
data <- fromJSON(query)
data <- as.data.frame(data)
return(data)
}
get_data(seattle, wa)
library(localgeo)
install.packages(localgeo)
install.packages('localgeo')
install.packages('localgeo', repos="https://github.com/hrbrmstr/localgeo.git")
install.packages('localgeo', repos="https://github.com/hrbrmstr/localgeo")
install.packages('localgeo', repos="https://github.com/hrbrmstr/localgeo")
devtools::install_github("hrbrmstr/localgeo")
library(jsonlite)
source('scripts/getLatLng.R')
get_data <- function(user_city, user_state) {
base_url <- "https://zilyo.p.mashape.com/search?"
key_parameter <- "mashape-key="
key <- "nowlV7qpGSmshTJ2jv6AeLUAGUrjp1632Pzjsn40XflJySxVK5"
latlng <- getLatLng(user_city, user_state)
lat <- latlng$lat
lng <- latlng$lon
required_parameters <- paste0("&latitude=", lat, "&longitude=", lng)
query <- paste0(base_url, key_parameter, key, required_parameters)
data <- fromJSON(query)
data <- as.data.frame(data)
return(data)
}
library(localgeo)
# Gets the lat/ln of a specified city + state
getLatLng <- function(city_search, state_search) {
p <- geocode(city_search, state_search)
return(p)
}
get_data(seattle, wa)
library(jsonlite)
source('scripts/getLatLng.R')
get_data <- function(user_city, user_state) {
base_url <- "https://zilyo.p.mashape.com/search?"
key_parameter <- "mashape-key="
key <- "nowlV7qpGSmshTJ2jv6AeLUAGUrjp1632Pzjsn40XflJySxVK5"
latlng <- getLatLng(user_city, user_state)
lat <- latlng$lat
lng <- latlng$lon
required_parameters <- paste0("&latitude=", lat, "&longitude=", lng)
query <- paste0(base_url, key_parameter, key, required_parameters)
data <- fromJSON(query)
return(data$result)
}
get_data('seattle', 'wa')
get_data('Seattle', 'WA')
View(get_data('Seattle', 'WA'))
View(iris)
library(plotly)
library(dplyr)
build_plot <- function(data, species, lengthOrWidth) {
if(lengthOrWidth == 'length') {
plot_title <- paste("Sepal Length vs. Petal Length:", species)
data <- data %>%
filter(Species == species) %>%
select(Sepal.Length, Petal.Length, Species)
plot <- plot_ly(
data = species_data, x = Sepal.Length, y = Petal.Length, mode = "markers") %>%
layout(title = plot_title)
} else {
plot_title <- paste("Sepal Width vs. Petal Width:", species)
data <- data %>%
filter(Species == species) %>%
select(Sepal.Width, Petal.Width, Species)
plot <- plot_ly(
data = data, x = Sepal.Width, y = Petal.Width, mode = "markers") %>%
layout(title = plot_title)
}
return(plot)
}
build_plot(iris)
build_plot(iris, 'setosa', 'length')
build_plot(iris, 'setosa', 'length')
library(plotly)
library(dplyr)
build_plot <- function(data, species, lengthOrWidth) {
if(lengthOrWidth == 'length') {
plot_title <- paste("Sepal Length vs. Petal Length:", species)
data <- data %>%
filter(Species == species) %>%
select(Sepal.Length, Petal.Length, Species)
plot <- plot_ly(
data = data, x = Sepal.Length, y = Petal.Length, mode = "markers") %>%
layout(title = plot_title)
} else {
plot_title <- paste("Sepal Width vs. Petal Width:", species)
data <- data %>%
filter(Species == species) %>%
select(Sepal.Width, Petal.Width, Species)
plot <- plot_ly(
data = data, x = Sepal.Width, y = Petal.Width, mode = "markers") %>%
layout(title = plot_title)
}
return(plot)
}
build_plot(iris, 'setosa', 'length')
build_plot(iris, 'setosa', 'width')
build_plot(iris, 'versicolor', 'length')
build_plot(iris, 'versicolor', 'width')
build_plot(iris, 'virginica', 'length')
build_plot(iris, 'virginica', 'width')
library(shiny)
library(plotly)
shinyUI(fluidPage(
# Create a title
titlePanel('Assignment 8'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
radioButtons("species", label = h3("Choose a Species"),
choices = list("Setosa" = 'setosa', "Versicolor" = 'versicolor', "Virginica" = 'virginica')
),
radioButtons("lengthOrWidth", label = h3("Pick: Length or Width"),
choices = list("Length" = 'length', "Petal" = 'width')
)
)
),
# Main panel: display plotly scatterplot
mainPanel(
plotlyOutput('plot')
)
))
library(shiny)
library(plotly)
shinyUI(fluidPage(
# Create a title
titlePanel('Assignment 8'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
radioButtons("species", label = h3("Choose a Species"),
choices = list("Setosa" = 'setosa', "Versicolor" = 'versicolor', "Virginica" = 'virginica')
),
radioButtons("lengthOrWidth", label = h3("Pick: Length or Width"),
choices = list("Length" = 'length', "Petal" = 'width')
)
)
),
))
library(shiny)
library(plotly)
shinyUI(fluidPage(
# Create a title
titlePanel('Assignment 8'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
radioButtons("species", label = h3("Choose a Species"),
choices = list("Setosa" = 'setosa', "Versicolor" = 'versicolor', "Virginica" = 'virginica')
),
radioButtons("lengthOrWidth", label = h3("Pick: Length or Width"),
choices = list("Length" = 'length', "Petal" = 'width')
)
)
),
# Main panel: display plotly scatterplot
mainPanel(
)
))
library(shiny)
source('make_plot.r')
library(shiny)
source('make_plot.r')
library(shiny)
source('make_plot.r')
setwd(dir = 'Desktop/info498f/homework/a8-building-applications/')
source('make_plot.r')
data <- iris
shinyServer(function(input, output) {
# Create a map via your build_map function
output$plot <- renderPlotly({
make_plot(data, input$species, input$lengthOrWidth)
})
})
library(shiny)
library(plotly)
shinyUI(fluidPage(
# Create a title
titlePanel('Assignment 8'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
radioButtons("species", label = h3("Choose a Species"),
choices = list("Setosa" = 'setosa', "Versicolor" = 'versicolor', "Virginica" = 'virginica')
),
radioButtons("lengthOrWidth", label = h3("Pick: Length or Width"),
choices = list("Length" = 'length', "Petal" = 'width')
)
)
),
# Main panel: display plotly scatterplot
mainPanel(
plotlyOutput('plot')
)
))
shiny::runApp()
library(plotly)
library(dplyr)
make_plot <- function(data, species, lengthOrWidth, sepalRange, petalRange) {
if(lengthOrWidth == 'length') {
plot_title <- paste("Sepal Length vs. Petal Length:", species)
data <- data %>%
filter(
Species == species,
Sepal.Length >= sepalRange[1],
Sepal.Length <= sepalRange[2],
Petal.Length >= petalRange[1],
Petal.Length <= petalRange[2]
) %>%
select(Sepal.Length, Petal.Length, Species)
plot <- plot_ly(
data = data, x = Sepal.Length, y = Petal.Length, mode = "markers") %>%
layout(title = plot_title)
} else {
plot_title <- paste("Sepal Width vs. Petal Width:", species)
data <- data %>%
filter(
Species == species,
Sepal.Width >= sepalRange[1],
Sepal.Width <= sepalRange[2],
Petal.Width >= petalRange[1],
Petal.Width <= petalRange[2]
) %>%
select(Sepal.Width, Petal.Width, Species)
plot <- plot_ly(
data = data, x = Sepal.Width, y = Petal.Width, mode = "markers") %>%
layout(title = plot_title)
}
return(plot)
}
make_plot(iris, 'verginica', 'width', c(2.5, 3), c(1.5, 2))
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(dplyr)
data <- iris
listOfSpecies <- unique(data$Species)
listOfSpecies
listOfSpecies <- as.character(unique(data$Species))
listOfSpecies
shiny::runApp()
str_to_title(listOfSpecies[1])
library(stringr)
str_to_title(listOfSpecies[1])
shiny::runApp()
data <- iris
listOfSpecies <- as.character(unique(data$Species))
sepalLengthRange <- c(min(data$Sepal.Length), max(data$Sepal.Length))
petalLengthRange <- c(min(data$Petal.Length), max(data$Petal.Length))
sepalWidthRange <- c(min(data$Sepal.Width), max(data$Sepal.Width))
sepalWidthRange <- c(min(data$Sepal.Width), max(data$Sepal.Width))
data <- iris
listOfSpecies <- as.character(unique(data$Species))
sepalLengthRange <- c(min(data$Sepal.Length), max(data$Sepal.Length))
petalLengthRange <- c(min(data$Petal.Length), max(data$Petal.Length))
sepalWidthRange <- c(min(data$Sepal.Width), max(data$Sepal.Width))
petalWidthRange <- c(min(data$Sepal.Width), max(data$Sepal.Width))
library(shiny)
library(dplyr)
library(stringr)
data <- iris
listOfSpecies <- as.character(unique(data$Species))
sepalLengthRange <- c(min(data$Sepal.Length), max(data$Sepal.Length))
petalLengthRange <- c(min(data$Petal.Length), max(data$Petal.Length))
sepalWidthRange <- c(min(data$Sepal.Width), max(data$Sepal.Width))
petalWidthRange <- c(min(data$Petal.Width), max(data$Petal.Width))
shinyUI(fluidPage(
# Create a title
titlePanel('Assignment 8: Iris Dataset with Shiny'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
radioButtons("species", label = h3("Choose a Species"),
choices = str_to_title(listOfSpecies)
),
radioButtons("lengthOrWidth", label = h3("Pick: Length or Width"),
choices = list("Length" = 'length', "Width" = 'width')
),
sliderInput("sepalLengthRange", label = h3("Sepal.Length Range"), min = sepalLengthRange[1],
max = sepalLengthRange[2], value = c(sepalLengthRange[1], sepalLengthRange[2]), step = 0.1),
sliderInput("petalLengthRange", label = h3("Petal.Length Range"), min = petalLengthRange[1],
max = petalLengthRange[2], value = c(petalLengthRange[1], petalLengthRange[2]), step = 0.1),
sliderInput("sepalWidthRange", label = h3("Sepal.Width Range"), min = sepalWidthRange[1],
max = sepalWidthRange[2], value = c(sepalWidthRange[1], sepalWidthRange[2]), step = 0.1),
sliderInput("petalWidthRange", label = h3("Petal.Width Range"), min = petalWidthRange[1],
max = petalWidthRange[2], value = c(petalWidthRange[1], petalWidthRange[2]), step = 0.1)
),
# Main panel: display plotly scatterplot
mainPanel(
plotlyOutput('plot')
)
)
))
#list("Setosa" = 'setosa', "Versicolor" = 'versicolor', "Virginica" = 'virginica')
shiny::runApp()
